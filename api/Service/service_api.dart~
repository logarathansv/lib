import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:http_parser/http_parser.dart';
import 'package:mime/mime.dart';
import 'package:path/path.dart';
import '../../models/service_model/service_model.dart';
import '../endpoints.dart';

class ServiceService {
  final Dio _dio;

  ServiceService(this._dio);

  Future<List<Service>> getServices() async {
    try {
      final response = await _dio.get(Endpoints.getServices);
      if (response.statusCode == 200) {
        List<dynamic> jsonData = response.data;
        return jsonData.map((data) => Service.fromJson(data)).toList();
      } else {
        throw Exception("Failed to load Services");
      }
    }catch (error) {
      throw Exception("Failed to load Services:$error");
    }
  }

  Future<void> addService(Service service, File? image) async {
    try {
      FormData formData= FormData.fromMap({
        'name': service.name,
        'price': service.price,
        if(service.description != null)'description': service.description
      });
      if (image != null) {
        String? mimeType = lookupMimeType(image.path); // Get MIME type
        List<String>? mimeTypeParts = mimeType?.split('/');

        formData.files.add(
          MapEntry(
            'image',
            await MultipartFile.fromFile(
              image.path,
              filename: basename(image.path),
              contentType: mimeTypeParts != null
                  ? MediaType(mimeTypeParts[0], mimeTypeParts[1])
                  : null, // Add content type
            ),
          ),
        );
      }
      final response = await _dio.post(
          Endpoints.editService,
          data: service.toJson()
      );
      if (response.statusCode == 201) {
        print('Service created successfully!');
      } else {
        throw Exception("Failed to create Service");
      }
    } catch (error) {
      throw Exception("Failed to create Service:$error");
    }
  }

  Future<void> editService(Service service,File? image) async {
    try {

      FormData formData= FormData.fromMap({
        'name': service.name,
        'price': service.price,
        'description': service.description
      });
      if (image != null) {
        String? mimeType = lookupMimeType(image.path); // Get MIME type
        List<String>? mimeTypeParts = mimeType?.split('/');

        formData.files.add(
          MapEntry(
            'image',
            await MultipartFile.fromFile(
              image.path,
              filename: basename(image.path),
              contentType: mimeTypeParts != null
                  ? MediaType(mimeTypeParts[0], mimeTypeParts[1])
                  : null, // Add content type
            ),
          ),
        );
      }

      final response = await _dio.put(
          '${Endpoints.editService}/${service.Sid}',
          data: service.toJson()
      );
      if (response.statusCode == 200) {
        print('Service edited successfully!');
      } else {
        throw Exception("Failed to edit Service");
      }
    } catch (error) {
      throw Exception("Failed to edit Service:$error");
    }
  }

  Future<void> deleteService(String serviceId) async {
    try {
      final response = await _dio.put(
          '${Endpoints.deleteService}/$serviceId',
      );
      if (response.statusCode == 200) {
        print('Service deleted successfully!');
      } else {
        print('Failed to delete service: ${response.statusCode}');
      }
    } catch (error) {
      throw Exception("Failed to delete Service:$error");
    }
  }
}