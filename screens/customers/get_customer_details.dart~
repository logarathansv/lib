import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:sklyit_business/providers/customer_provider.dart';
import '../../models/customer_model/customer_class.dart';

class AddNewCustomerPage extends ConsumerStatefulWidget {
  final Customer? customer;

  const AddNewCustomerPage({super.key, this.customer});

  @override
  _AddNewCustomerPageState createState() => _AddNewCustomerPageState();
}

class _AddNewCustomerPageState extends ConsumerState<AddNewCustomerPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _nameController;
  late TextEditingController _addressController;
  late TextEditingController _emailController;
  late TextEditingController _phoneController;
  String _countryCode = '+91';

  @override
  void initState() {
    super.initState();
    _nameController = TextEditingController(text: widget.customer?.name ?? '');
    _addressController = TextEditingController(text: widget.customer?.address ?? '');
    _emailController = TextEditingController(text: widget.customer?.email ?? '');
    _phoneController = TextEditingController(text: widget.customer?.phoneNumber ?? '');
  }

  @override
  void dispose() {
    _nameController.dispose();
    _addressController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  Future<void> _saveCustomer() async {
    if (_formKey.currentState!.validate()) {
      final newCustomer = Customer(
        custId: widget.customer?.custId,
        name: _nameController.text,
        address: _addressController.text,
        email: _emailController.text,
        phoneNumber: _phoneController.text,
        createdAt: DateTime.now().toString(),
      );

      final customerService = await ref.read(customerServiceProvider.future);

      try {
        if (widget.customer == null) {
          // Add new customer
          try {
            await customerService.addCustomer(newCustomer);
          }catch(error){
            print("Failed to add customer: $error");
          }
        } else {
          // Edit existing customer
          try{
          await customerService.editCustomer(newCustomer);
          }catch(error){
            print("Failed to edit customer: $error");
          }
        }
        ref.invalidate(getCustomerProvider);
        print("Customer saved successfully!");
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(widget.customer == null ? 'Customer added successfully!' : 'Customer updated successfully!'),
            duration: const Duration(seconds: 2),
          ),
        );
        Navigator.pop(context);
      } catch (error) {
        print("Failed to save customer: $error");
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.customer == null ? 'Add Customer' : 'Edit Customer'),
        centerTitle: true,
        backgroundColor: const Color(0xfff4c345), // Yellow AppBar
        foregroundColor: Colors.black, // Black text for contrast
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              TextFormField(
                controller: _nameController,
                decoration: InputDecoration(
                  labelText: 'Name',
                  labelStyle: const TextStyle(color: Colors.black), // Black label text
                  filled: true,
                  fillColor: Colors.white, // White background
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black), // Yellow border
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black),
                  ),
                ),
                validator: (value) => value!.isEmpty ? 'Enter a name' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _addressController,
                decoration: InputDecoration(
                  labelText: 'Address',
                  labelStyle: const TextStyle(color: Colors.black),
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black),
                  ),
                ),
                validator: (value) => value!.isEmpty ? 'Enter an address' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'Email',
                  labelStyle: const TextStyle(color: Colors.black),
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black),
                  ),
                ),
                validator: (value) =>
                value!.isEmpty || !value.contains('@') ? 'Enter a valid email' : null,
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _phoneController,
                decoration: InputDecoration(
                  labelText: 'Phone Number',
                  labelStyle: const TextStyle(color: Colors.black),
                  filled: true,
                  fillColor: Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black),
                  ),
                  enabledBorder: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(10),
                    borderSide: const BorderSide(color: Colors.black),
                  ),
                ),
                validator: (value) =>
                value!.isEmpty || value.length < 10 ? 'Enter a valid phone number' : null,
              ),
              const SizedBox(height: 24),
              Center(

                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xfff4c345),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                      padding: const EdgeInsets.all(24),
                      minimumSize: const Size(60, 40),
                    ), onPressed: _saveCustomer,
                    child: const Text('Save'),
                  ),
                ),
            ],
          ),
        ),
      ),
      backgroundColor: Colors.white, // White background
    );
  }


}
