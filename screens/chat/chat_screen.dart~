import 'package:dash_chat_2/dash_chat_2.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../models/chat_model/chat_message.dart';
import '../../providers/chat_provider.dart';
import '../../utils/socket/socket_service.dart';

class ChatScreen extends ConsumerStatefulWidget {
  final String currentUserId;
  final String receiverId;
  final String receiverName;

  ChatScreen({
    required this.currentUserId,
    required this.receiverId,
    required this.receiverName,
  });

  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends ConsumerState<ChatScreen> {
  List<ChatMessage> messages = [];
  String senderName = '';
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadChatHistory(); // Load history first
    _initializeSocketListener(); // Then listen for new messages
  }

  /// Load chat history from Riverpod provider
  Future<void> _loadChatHistory() async {
    try {
      final chatAsync = await ref.read(chatProvider(widget.receiverId).future);
      setState(() {
        messages = chatAsync.map((message) {
          return ChatMessage(
            text: message.content,
            user: ChatUser(id: message.sender),
            createdAt: message.timestamp,
          );
        }).toList();
        isLoading = false;
      });
    } catch (e) {
      print("Error loading chat history: $e");
      setState(() {
        isLoading = false;
      });
    }
  }

  /// Set up socket listener for real-time messages
  void _initializeSocketListener() {
    final socket = SocketService().socket;

    socket.on('receiveMessage', (data) {
      final newMessage = Message.fromJson(data);

      if ((newMessage.sender == widget.currentUserId && newMessage.receiver == widget.receiverId) ||
          (newMessage.receiver == widget.currentUserId && newMessage.sender == widget.receiverId)) {
        setState(() {
          messages.insert(
            0,
            ChatMessage(
              text: newMessage.content,
              user: ChatUser(id: newMessage.sender),
              createdAt: newMessage.timestamp,
            ),
          );
        });
      }
    });
  }

  @override
  void dispose() {
    final socket = SocketService().socket;
    socket.off('receiveMessage'); // Remove listener to prevent memory leaks
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final socket = SocketService().socket;

    return Scaffold(
      appBar: AppBar(
        title: Text('Person ${widget.receiverName}'),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : DashChat(
        currentUser: ChatUser(id: widget.currentUserId),
        onSend: (ChatMessage newMessage) {
          socket.emit('message', {
            'senderId': widget.currentUserId,
            'receiverId': widget.receiverId,
            'senderName': senderName,
            'receiverName': widget.receiverName,
            'content': newMessage.text,
          });

          setState(() {
            messages.insert(0, newMessage);
          });
        },
        messages: messages,
        inputOptions: InputOptions(alwaysShowSend: true),
      ),
    );
  }
}
