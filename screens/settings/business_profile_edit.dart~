import 'dart:convert';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:hugeicons/hugeicons.dart';
import 'package:image_picker/image_picker.dart';
import 'package:sklyit_business/models/profile_model/business_details_model.dart';
import 'package:sklyit_business/providers/business_main.dart';
import 'package:sklyit_business/providers/profile_provider.dart';
import 'package:textfield_tags/textfield_tags.dart';

import '../../api/profile/business_profile_api.dart';

class EditBusinessProfilePage extends ConsumerStatefulWidget {
  final BusinessProfile business;

  const EditBusinessProfilePage({Key? key, required this.business}) : super(key: key);

  @override
  _EditBusinessProfilePageState createState() => _EditBusinessProfilePageState();
}

class _EditBusinessProfilePageState extends ConsumerState<EditBusinessProfilePage> {
  late TextEditingController shopNameController;
  late TextEditingController shopDescController;
  late TextEditingController shopOpenTimeController;
  late TextEditingController shopClosingTimeController;
  late List<Map<String, TextEditingController>> addressControllers;
  late List<String> mainTags;
  late List<String> subTags;
  final StringTagController mainTagController = StringTagController();
  final StringTagController subTagController = StringTagController();
  File? file;
  final delAddresses = [];
  final List<Map<String, dynamic>> addAddresses = [];

  @override
  void initState() {
    super.initState();
    shopNameController = TextEditingController(text: widget.business.shopName);
    shopDescController = TextEditingController(text: widget.business.shopDesc);
    shopOpenTimeController = TextEditingController(text: widget.business.shopOpenTime);
    shopClosingTimeController = TextEditingController(text: widget.business.shopClosingTime);
    mainTags = List.from(widget.business.businessMainTags);
    subTags = List.from(widget.business.businessSubTags);
    addressControllers = widget.business.addresses.map((address) => {
      "street": TextEditingController(text: address.street),
      "city": TextEditingController(text: address.city),
      "district": TextEditingController(text: address.district),
      "state": TextEditingController(text: address.state),
      "pincode": TextEditingController(text: address.pincode),
    }).toList();
  }

  void _pickImage() async {
    final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);

    if (pickedFile != null) {
      setState(() {
        file = File(pickedFile.path);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Color(0xfff4c345),
        automaticallyImplyLeading: false,
        leading: IconButton(
          onPressed: () {
            Navigator.of(context).pop();
          },
          icon: HugeIcon(
            icon: HugeIcons.strokeRoundedArrowLeft03,
            color: Colors.black,
            size: 24.0,
          ),
        ),
        title: Text(
          'Edit Business Profile',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF2f4757),
          ),
        ),
      ),
      body: SingleChildScrollView(
        padding: EdgeInsets.all(16.0),
        child: Column(
          children: [
            Center(
              child: CircleAvatar(
                radius: 60,
                backgroundImage: widget.business.shopImage.isNotEmpty
                    ? NetworkImage(widget.business.shopImage)
                    : AssetImage('assets/default_business_image.png') as ImageProvider,
              ),
            ),
            SizedBox(height: 20),

            // Viewable Fields (Non-Editable)
            _buildViewableField("Business Name", widget.business.clientName),
            _buildViewableField("Domain Name", widget.business.domainName),
            _buildViewableField("Shop Email", widget.business.shopEmail),
            _buildViewableField("Shop Mobile", widget.business.shopMobile),

            // Editable Fields
            buildTextField("Shop Name", shopNameController),
            buildTextField("Shop Description", shopDescController),
            buildTimePickerField("Opening Time", shopOpenTimeController),
            buildTimePickerField("Closing Time", shopClosingTimeController),

            SizedBox(height: 20),
            Text(
              'Main Tags',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Color(0xFF028F83),
              ),
            ),
            TextFieldTags<String>(
              textfieldTagsController: mainTagController,
              initialTags: mainTags,
              textSeparators: const [' ', ','],
              validator: (String tag) {
                if(tag.length > 10) {
                  return 'Max length is 10 characters';
                }
                if (mainTags.length < 2) {
                  if (tag.isNotEmpty && !mainTags.contains(tag) && mainTags.length < 2) {
                    setState(() {
                      mainTags.add(tag);
                    });
                  } // Add main tag when it's valid
                }
                else {
                  return 'You can add only 2 main tags';
                }
                return null;
              },
              inputFieldBuilder: (context, inputFieldValues) {
                return Padding(
                  padding: const EdgeInsets.all(10),
                  child: TextField(
                    onTap: () {
                      mainTagController.getFocusNode?.requestFocus();
                    },
                    controller: inputFieldValues.textEditingController,
                    focusNode: inputFieldValues.focusNode,
                    decoration: InputDecoration(
                      border: const OutlineInputBorder(
                        borderSide: BorderSide(
                          color: Color(0xFF028F83),
                        ),
                      ),
                      focusedBorder: const OutlineInputBorder(
                        borderSide: BorderSide(
                          color: Color(0xFF028F83),
                        ),
                      ),
                      hintText: inputFieldValues.tags.isNotEmpty
                          ? ''
                          : "Enter main tags",
                      errorText: inputFieldValues.error,
                      prefixIcon: inputFieldValues.tags.isNotEmpty
                          ? SingleChildScrollView(
                        controller: inputFieldValues.tagScrollController,
                        scrollDirection: Axis.vertical,
                        child: Padding(
                          padding: const EdgeInsets.only(
                            top: 8,
                            bottom: 8,
                            left: 8,
                          ),
                          child: Wrap(
                              runSpacing: 4.0,
                              spacing: 4.0,
                              children:
                              inputFieldValues.tags.map((String tag) {
                                return Container(
                                  decoration: const BoxDecoration(
                                    borderRadius: BorderRadius.all(
                                      Radius.circular(20.0),
                                    ),
                                    color:
                                    Color(0xFF028F83),
                                  ),
                                  margin: const EdgeInsets.symmetric(
                                      horizontal: 5.0),
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 10.0, vertical: 5.0),
                                  child: Row(
                                    mainAxisAlignment:
                                    MainAxisAlignment.start,
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      InkWell(
                                        child: Text(
                                          '#$tag',
                                          style: const TextStyle(
                                              color: Colors.white),
                                        ),
                                        onTap: () {
                                          //print("$tag selected");
                                        },
                                      ),
                                      const SizedBox(width: 4.0),
                                      InkWell(
                                        child: const Icon(
                                          Icons.cancel,
                                          size: 14.0,
                                          color: Color.fromARGB(
                                              255, 233, 233, 233),
                                        ),
                                        onTap: () {
                                          inputFieldValues
                                              .onTagRemoved(tag);
                                          mainTags.remove(tag);
                                        },
                                      )
                                    ],
                                  ),
                                );
                              }).toList()),
                        ),
                      )
                          : null,
                    ),
                    onChanged: inputFieldValues.onTagChanged,
                    onSubmitted: inputFieldValues.onTagSubmitted,
                  ),
                );
              },
            ),
            SizedBox(height: 20),
            Text(
              'Sub Tags',
              style: TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.bold,
                color: Color(0xFF028F83),
              ),
            ),
            SizedBox(height: 20),
            TextFieldTags<String>(
              textfieldTagsController: subTagController,
              initialTags: subTags,
              textSeparators: const [' ', ','],
              validator: (String tag) {
                if(tag.length > 10) {
                  return 'Max length is 10 characters';
                }
                if (subTags.length < 9) {
                  if (tag.isNotEmpty && !subTags.contains(tag) && subTags.length < 2) {
                    setState(() {
                      subTags.add(tag);
                    });
                  }
                }
                else {
                  return 'You can add only 10 sub tags';
                }
                return null;
              },
              inputFieldBuilder: (context, inputFieldValues) {
                return Padding(
                  padding: const EdgeInsets.all(10),
                  child: TextField(
                    onTap: () {
                      subTagController.getFocusNode?.requestFocus();
                    },
                    controller: inputFieldValues.textEditingController,
                    focusNode: inputFieldValues.focusNode,
                    decoration: InputDecoration(
                      border: const OutlineInputBorder(
                        borderSide: BorderSide(
                          color: Color(0xFF028F83),
                        ),
                      ),
                      focusedBorder: const OutlineInputBorder(
                        borderSide: BorderSide(
                          color: Color(0xFF028F83),
                        ),
                      ),
                      hintText: inputFieldValues.tags.isNotEmpty
                          ? ''
                          : "Enter sub tags",
                      errorText: inputFieldValues.error,
                      prefixIcon: inputFieldValues.tags.isNotEmpty
                          ? SingleChildScrollView(
                        controller: inputFieldValues.tagScrollController,
                        scrollDirection: Axis.vertical,
                        child: Padding(
                          padding: const EdgeInsets.only(
                            top: 8,
                            bottom: 8,
                            left: 8,
                          ),
                          child: Wrap(
                              runSpacing: 4.0,
                              spacing: 4.0,
                              children:
                              inputFieldValues.tags.map((String tag) {
                                return Container(
                                  decoration: const BoxDecoration(
                                    borderRadius: BorderRadius.all(
                                      Radius.circular(20.0),
                                    ),
                                    color:
                                    Color(0xFF028F83),
                                  ),
                                  margin: const EdgeInsets.symmetric(
                                      horizontal: 5.0),
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: 10.0, vertical: 5.0),
                                  child: Row(
                                    mainAxisAlignment:
                                    MainAxisAlignment.start,
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      InkWell(
                                        child: Text(
                                          '#$tag',
                                          style: const TextStyle(
                                              color: Colors.white),
                                        ),
                                        onTap: () {
                                          //print("$tag selected");
                                        },
                                      ),
                                      const SizedBox(width: 4.0),
                                      InkWell(
                                        child: const Icon(
                                          Icons.cancel,
                                          size: 14.0,
                                          color: Color.fromARGB(
                                              255, 233, 233, 233),
                                        ),
                                        onTap: () {
                                          inputFieldValues
                                              .onTagRemoved(tag);
                                          subTags.remove(tag);
                                        },
                                      )
                                    ],
                                  ),
                                );
                              }).toList()),
                        ),
                      )
                          : null,
                    ),
                    onChanged: inputFieldValues.onTagChanged,
                    onSubmitted: inputFieldValues.onTagSubmitted,
                  ),
                );
              },
            ),
            SizedBox(height: 20),
            Row(
                children: [
                  ElevatedButton(
                    onPressed: _pickImage,
                    style: ElevatedButton.styleFrom(
                      foregroundColor: Colors.white, backgroundColor: Colors.teal,
                      padding: EdgeInsets.symmetric(vertical: 16, horizontal: 10),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10.0),
                      ),
                    ),
                    child: Text('Upload Business Image',
                        style: TextStyle(fontSize: 16)),
                  ),
                  SizedBox(width: 8),
                  (file != null) ? Text('Image Selected', style: TextStyle(color: Colors.redAccent,fontSize: 16)) : Text(''),
                ]
            ),
            SizedBox(height: 20),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text("Addresses", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                    Spacer(),
                    ElevatedButton.icon(
                      onPressed: () async => await _addAddress(),
                      icon: Icon(Icons.add, size: 18, color: Colors.teal,),
                      label: Text("Add Address"),
                      style: ElevatedButton.styleFrom(
                        foregroundColor: Colors.teal,
                        backgroundColor: Colors.grey.shade50,
                        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 10),
                        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(6)),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 8),
                ...addressControllers.asMap().entries.map((entry) {
                  int index = entry.key;
                  var address = entry.value;

                  return Card(
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                    elevation: 5,
                    margin: EdgeInsets.symmetric(vertical: 8.0),
                    child: Padding(
                      padding: EdgeInsets.all(16.0),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Icon(Icons.location_on, color: Colors.teal, size: 24),
                              SizedBox(width: 8),
                              Expanded(
                                child: Text(
                                  "${address["street"]!.text}, ${address["city"]!.text}",
                                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                                  overflow: TextOverflow.ellipsis,
                                ),
                              ),
                            ],
                          ),
                          SizedBox(height: 4),
                          Text(
                            "${address["district"]!.text}, ${address["state"]!.text} - ${address["pincode"]!.text}",
                            style: TextStyle(fontSize: 14, color: Colors.grey[700]),
                          ),
                          SizedBox(height: 12),
                          Row(
                            mainAxisAlignment: MainAxisAlignment.end,
                            children: [
                              ElevatedButton.icon(
                                onPressed: () async => await _editAddress(index),
                                icon: Icon(Icons.edit, size: 20, color: Colors.blue,),
                                label: Text("Edit"),
                                style: ElevatedButton.styleFrom(
                                  foregroundColor: Colors.black,
                                  backgroundColor: Colors.white,
                                  padding: EdgeInsets.symmetric(horizontal: 10, vertical: 10),
                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                                ),
                              ),
                              SizedBox(width: 4,),
                              ElevatedButton.icon(
                                onPressed: () async => await _editAddress(index),
                                icon: Icon(Icons.edit, size: 20, color: Colors.blue,),
                                label: Text("Delete"),
                                style: ElevatedButton.styleFrom(
                                  foregroundColor: Colors.black,
                                  backgroundColor: Colors.white,
                                  padding: EdgeInsets.symmetric(horizontal: 10, vertical: 10),
                                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  );
                }).toList(),
                SizedBox(height: 20),
                Center(
                  child: ElevatedButton(
                    onPressed: () async {
                      await _saveChanges(ref);
                      ref.invalidate(businessProfileProvider);
                    },
                    child: Text("Save Changes", style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.teal,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(horizontal: 40, vertical: 16),
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                      elevation: 3,
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // Helper method to build viewable fields
  Widget _buildViewableField(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 8.0),
      child: ListTile(
        title: Text(label, style: TextStyle(fontSize: 14, color: Colors.grey)),
        subtitle: Text(value, style: TextStyle(fontSize: 16)),
      ),
    );
  }

  // Helper method to build editable text fields
  Widget buildTextField(String label, TextEditingController controller) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
        ),
      ),
    );
  }

  // Helper method to build time picker fields
  Widget buildTimePickerField(String label, TextEditingController controller) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 8.0),
      child: TextFormField(
        controller: controller,
        decoration: InputDecoration(
          labelText: label,
          border: OutlineInputBorder(),
          suffixIcon: IconButton(
            icon: Icon(Icons.access_time),
            onPressed: () => pickTime(context, controller),
          ),
        ),
        readOnly: true,
      ),
    );
  }

  String convertTo24HourFormat(TimeOfDay time) {
    final hours = time.hour.toString().padLeft(2, '0');
    final minutes = time.minute.toString().padLeft(2, '0');
    return "$hours:$minutes"; // Format as HH:mm
  }

  Future<void> pickTime(BuildContext context, TextEditingController controller) async {
    TimeOfDay? pickedTime = await showTimePicker(
      context: context,
      initialTime: TimeOfDay.now(),
    );

    if (pickedTime != null) {
      setState(() {
        controller.text = convertTo24HourFormat(pickedTime);
      });
    }
  }

  Future<void> _addAddress() async {
    await _showAddressDialog();
  }

  // Edit Address
  Future<void> _editAddress(int index) async {
    await _showAddressDialog(index: index);
  }

  // Delete Address
  void _deleteAddress(int index) {
    delAddresses.insert(0, addressControllers[index]);
    setState(() {
      addressControllers.removeAt(index);
    });
  }

  Future<void> _showAddressDialog({int? index}) async {
    TextEditingController streetController = TextEditingController();
    TextEditingController cityController = TextEditingController();
    TextEditingController districtController = TextEditingController();
    TextEditingController stateController = TextEditingController();
    TextEditingController pincodeController = TextEditingController();

    if (index != null) {
      streetController.text = addressControllers[index]["street"]!.text;
      cityController.text = addressControllers[index]["city"]!.text;
      districtController.text = addressControllers[index]["district"]!.text;
      stateController.text = addressControllers[index]["state"]!.text;
      pincodeController.text = addressControllers[index]["pincode"]!.text;
    }

    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(index == null ? "Add Address" : "Edit Address"),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                buildTextField("Street", streetController),
                buildTextField("City", cityController),
                buildTextField("District", districtController),
                buildTextField("State", stateController),
                buildTextField("Pincode", pincodeController),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop(); // Discard
              },
              child: Text("Discard", style: TextStyle(color: Colors.red)),
            ),
            ElevatedButton(
              onPressed: () async {
                final updateBusiness = BusinessProfileAPIService(ref.watch(apiClientProvider).dio);

                if(index == null) {
                  final data = {
                    "street": streetController.text,
                    "city": cityController.text,
                    "district": districtController.text,
                    "state": stateController.text,
                    "pincode": pincodeController.text
                  };
                  addAddresses.insert(0, data);
                  setState(() {
                    addressControllers.add({
                      "street": streetController,
                      "city": cityController,
                      "district": districtController,
                      "state": stateController,
                      "pincode": pincodeController,
                    });
                  });
                }
                else{
                  final data = {
                    "oldAddress" : {
                      "street": addressControllers[index]["street"]!.text,
                      "city": addressControllers[index]["city"]!.text,
                      "district": addressControllers[index]["district"]!.text,
                      "state": addressControllers[index]["state"]!.text,
                      "pincode": addressControllers[index]["pincode"]!.text,
                    },
                    "newAddress": {
                      "street": streetController.text,
                      "city": cityController.text,
                      "district": districtController.text,
                      "state": stateController.text,
                      "pincode": pincodeController.text,
                    }
                  };
                  await updateBusiness.updateAddress(data);
                  setState(() {
                    addressControllers[index]["street"]!.text = streetController.text;
                    addressControllers[index]["city"]!.text = cityController.text;
                    addressControllers[index]["district"]!.text = districtController.text;
                    addressControllers[index]["state"]!.text = stateController.text;
                    addressControllers[index]["pincode"]!.text = pincodeController.text;
                  });
                }
                Navigator.of(context).pop(); // Close dialog
              },
              child: Text("Save"),
            ),
          ],
        );
      },
    );
  }

  Future<void> _saveChanges(WidgetRef ref) async {
    final data = {
      "shopname": shopNameController.text,
      "shopdesc": shopDescController.text,
      "shopOpenTime": shopOpenTimeController.text,
      "shopClosingTime": shopClosingTimeController.text,
      "BusinessMainTags": mainTags,
      "BusinessSubTags": subTags,
    };
    final updateBusiness = BusinessProfileAPIService(ref.watch(apiClientProvider).dio);

    if(delAddresses.isNotEmpty) {
      for(int i = 0; i < delAddresses.length; i++) {
        final data = {
          "address": {
            "street": delAddresses[i]["street"]!.text,
            "city": delAddresses[i]["city"]!.text,
            "district": delAddresses[i]["district"]!.text,
            "state": delAddresses[i]["state"]!.text,
            "pincode": delAddresses[i]["pincode"]!.text,
          }
        };
        await updateBusiness.deleteAddress(data);
      }
    }

    if(addAddresses.isNotEmpty){
      await updateBusiness.addAddress(addAddresses);
    }

    try {
      await updateBusiness.updateBusinessProfile(data, file);
      Fluttertoast.showToast(msg: "Business profile updated successfully!", toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.BOTTOM, timeInSecForIosWeb: 1);
      Navigator.of(context).pop();
    } catch (e) {
      Fluttertoast.showToast(msg: "Failed to update business profile: $e", toastLength: Toast.LENGTH_SHORT, gravity: ToastGravity.BOTTOM, timeInSecForIosWeb: 1);
    }
  }
}