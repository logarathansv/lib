import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:hugeicons/hugeicons.dart';
import 'package:sklyit_business/providers/booking_provider.dart';
import '../../models/booking_model/bookings.dart';
import '../../widgets/booking_card.dart';
import 'booking_details.dart';

class BookingPage extends ConsumerStatefulWidget {
  const BookingPage({super.key});

  @override
  _BookingPageState createState() => _BookingPageState();
}

class _BookingPageState extends ConsumerState<BookingPage>
    with SingleTickerProviderStateMixin {
  late TabController _tabController;
  String _searchQuery = "";

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 4, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  void _updateSearchQuery(String query) {
    setState(() {
      _searchQuery = query;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        backgroundColor: const Color(0xfff4c345),
        automaticallyImplyLeading: false,
        leading: IconButton(
          onPressed: () => {Navigator.of(context).pop()},
          icon: const HugeIcon(
            icon: HugeIcons.strokeRoundedArrowLeft03,
            color: Colors.black,
            size: 24.0,
          ),
        ),
        title: const Text(
          'Bookings',
          style: TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF2f4757),
          ),
        ),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: Column(
          children: [
            // Search Bar
            Container(
              decoration: BoxDecoration(
                color: Colors.grey[200],
                borderRadius: BorderRadius.circular(25),
              ),
              child: TextField(
                onChanged: _updateSearchQuery,
                decoration: const InputDecoration(
                  border: InputBorder.none,
                  hintText: "Search... ",
                  prefixIcon: Icon(Icons.search),
                  contentPadding:
                  EdgeInsets.symmetric(horizontal: 20, vertical: 15),
                ),
              ),
            ),
            const SizedBox(height: 16),

            // Tabs for New Requests, Rejected, Cancelled, and Accepted
            TabBar(
              controller: _tabController,
              labelPadding: const EdgeInsets.symmetric(horizontal: 10),
              indicatorColor: const Color(0xfff4c345),
              labelColor: const Color(0xFF2f4757), // Selected label color
              unselectedLabelColor:
              const Color(0xFF2f4757), // Unselected label color
              tabs: const [
                Tab(
                  text: "New Requests", // Full text shown
                ),
                Tab(
                  text: "Rejected", // Full text shown
                ),
                Tab(
                  text: "Cancelled", // Full text shown
                ),
                Tab(
                  text: "Accepted", // Full text shown
                ),
              ],
            ),

            const SizedBox(height: 16),

            // Tab views
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  BookingList(bookingType: "Pending", searchQuery: _searchQuery),
                  BookingList(bookingType: "Rejected", searchQuery: _searchQuery),
                  BookingList(bookingType: "Cancelled", searchQuery: _searchQuery),
                  BookingList(bookingType: "Accepted", searchQuery: _searchQuery)
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class BookingList extends ConsumerWidget {
  final String bookingType;
  final String searchQuery;

  BookingList({super.key, required this.bookingType, required this.searchQuery});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final bookingasync = ref.watch(getbookingProvider);

    return bookingasync.when(
      data: (bookings) {
        // Filter bookings based on the bookingType and searchQuery
        List<Booking> filteredBookings = bookings.where((booking) {
          bool matchesType = booking.status == bookingType;
          bool matchesSearch = searchQuery.isEmpty ||
              booking.customerName.toLowerCase().contains(searchQuery.toLowerCase()) ||
              booking.service['ServiceName'].toString().toLowerCase().contains(searchQuery.toLowerCase());

          return matchesType && matchesSearch;
        }).toList();

        return ListView(
          children: [
            for (var booking in filteredBookings)
              GestureDetector(
                onTap: () => {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => BookingDetailsPage(
                            customerName: booking.customerName,
                            services: [booking.service['ServiceName'] as String],
                            date: booking.date,
                            time: booking.time,
                            serviceMode: booking.serviceMode,
                          ))
                  )
                },
                child: BookingCard(
                  customerName: booking.customerName,
                  services: booking.service['ServiceName'] as String,
                  date: booking.date,
                  time: booking.time,
                  bookingType: bookingType,
                ),
              ),
          ],
        );
      },
      error: (error, _) => Text('Error: $error'),
      loading: () => Center(child: CircularProgressIndicator()),
    );
  }
}